generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id            String           @id @default(uuid())
  name          String
  description   String
  category      String
  tags          String[]
  price         Decimal          @db.Decimal(10, 2)
  imageUrl      String
  sku           String           @unique
  stock         Int              @default(0)
  minOrder      Int              @default(1)
  isActive      Boolean          @default(true)
  isFeatured    Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  status        ProductStatus    @default(DRAFT)
  BulkPricing   BulkPricing[]
  OrderItem     OrderItem[]
  CartItems     CartItem[]
  Variants      ProductVariant[]
  Collection    Collection?      @relation("CollectionProducts", fields: [collectionId], references: [id])
  collectionId  String?
  ProductImages ProductImage[]
}

model BulkPricing {
  id          String   @id @default(uuid())
  minQuantity Int
  price       Decimal  @db.Decimal(10, 2)
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, minQuantity])
}

model Customer {
  id                    String                  @id @default(uuid())
  companyName           String
  contactName           String
  email                 String                  @unique
  phone                 String
  address               Json
  businessType          String
  taxId                 String
  status                CustomerStatus          @default(PENDING)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  password              String
  creditLimit           Decimal?                @db.Decimal(10, 2)
  creditStatus          String?
  CustomerDocuments     CustomerDocument[]
  CustomerStatusHistory CustomerStatusHistory[]
  orders                Order[]
  RequiredDocuments     RequiredDocument[]
  Carts                 Cart[]
}

model Order {
  id            String        @id @default(uuid())
  orderNumber   String        @unique
  customerId    String
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2)
  shipping      Decimal       @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customer      Customer      @relation(fields: [customerId], references: [id])
  OrderItems    OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model CustomerDocument {
  id                 String            @id
  url                String
  customerId         String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  requiredDocumentId String?
  status             DocumentStatus    @default(PENDING)
  Customer           Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  RequiredDocument   RequiredDocument? @relation(fields: [requiredDocumentId], references: [id])
}

model CustomerStatusHistory {
  id         String         @id
  status     CustomerStatus
  comment    String
  customerId String
  userId     String
  createdAt  DateTime       @default(now())
  Customer   Customer       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  User       User           @relation(fields: [userId], references: [id])
}

model RequiredDocument {
  id                String             @id
  name              String
  type              String
  url               String
  customerId        String
  status            DocumentStatus     @default(PENDING)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime
  CustomerDocuments CustomerDocument[]
  Customer          Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                  @id
  email                 String                  @unique
  password              String
  name                  String
  role                  UserRole                @default(USER)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  CustomerStatusHistory CustomerStatusHistory[]
}

model Cart {
  id         String     @id @default(uuid())
  customerId String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   Customer   @relation(fields: [customerId], references: [id])
  items      CartItem[]

  @@index([customerId])
}

model CartItem {
  id        String          @id @default(uuid())
  cartId    String
  productId String
  variantId String?
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id])
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([variantId])
}

model ProductVariant {
  id           String         @id @default(uuid())
  sku          String         @unique
  price        Decimal        @db.Decimal(10, 2)
  stock        Int            @default(0)
  attributes   Json
  imageUrl     String?
  productId    String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  CartItems    CartItem[]
  ProductImage ProductImage[]

  @@index([productId])
}

model ProductImage {
  id        String          @id @default(uuid())
  url       String
  sortOrder Int             @default(0)
  productId String
  variantId String?
  altText   String?
  isDefault Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
}

model Collection {
  id          String    @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Products    Product[] @relation("CollectionProducts")
}

model Supplier {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  phone       String
  address     Json
  contactName String
  website     String?
  notes       String?
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orders      SupplierOrder[]
}

model SupplierOrder {
  id          String              @id @default(uuid())
  orderNumber String              @unique
  supplierId  String
  status      String              @default("PENDING")
  total       Decimal             @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  supplier    Supplier            @relation(fields: [supplierId], references: [id])
  orderItems  SupplierOrderItem[]
}

model SupplierOrderItem {
  id              String        @id @default(uuid())
  supplierOrderId String
  productName     String
  sku             String?
  quantity        Int
  price           Decimal       @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  supplierOrder   SupplierOrder @relation(fields: [supplierOrderId], references: [id], onDelete: Cascade)
}

enum CustomerStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ProductStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
